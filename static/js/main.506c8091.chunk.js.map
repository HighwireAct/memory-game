{"version":3,"sources":["new-record.wav","loss.wav","data/cards.js","utils/shuffle.js","components/ScoreCounter.js","components/Header.js","components/Card.js","components/CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","shuffle","array","i","j","temp","length","Math","floor","random","fighters","cards","push","id","image","concat","name","ScoreCounter","props","react_default","a","createElement","score","hiScore","Header","Fragment","components_ScoreCounter","Card","className","onClick","handleClick","src","alt","CardContainer","shake","map","card","src_components_Card","key","clicked","cardsShuffled","App","state","prevHiScore","slice","audio","newRecord","Audio","loss","playSound","sound","_this","play","find","setState","max","src_components_Header","this","src_components_CardContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.506c8091.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/new-record.ba4445ea.wav\";","module.exports = __webpack_public_path__ + \"static/media/loss.c2bf92c6.wav\";","// Create an array of arrays, each holding the image-url and\r\n// name of a fighter respectively\r\nconst fighters = [\r\n  [\"lucina\", \"Lucina\"],\r\n  [\"inkling\", \"Inkling\"],\r\n  [\"mario\", \"Mario\"],\r\n  [\"falcon\", \"Captain Falcon\"],\r\n  [\"link\", \"Link\"],\r\n  [\"dk\", \"Donkey Kong\"],\r\n  [\"ness\", \"Ness\"],\r\n  [\"dedede\", \"King Dedede\"],\r\n  [\"mewtwo\", \"Mewtwo\"],\r\n  [\"samus\", \"Samus\"],\r\n  [\"sheik\", \"Sheik\"],\r\n  [\"falco\", \"Falco\"],\r\n  [\"fox\", \"Fox\"],\r\n  [\"marth\", \"Marth\"],\r\n  [\"kirby\", \"Kirby\"],\r\n  [\"ice-climbers\", \"Ice Climbers\"],\r\n  [\"pikachu\", \"Pikachu\"],\r\n  [\"jigglypuff\", \"Jigglypuff\"]\r\n]\r\n\r\n// Create and generate array of card objects from\r\n// fighters array\r\nconst cards = [];\r\n\r\nfor (let i = 0; i < fighters.length; i++) {\r\n  cards.push({\r\n    id: i + 1,\r\n    image: `./assets/img/${fighters[i][0]}-thumb.png`,\r\n    name: fighters[i][1]\r\n  })\r\n}\r\n\r\nexport default cards;\r\n\r\n// [\r\n//   {\r\n//     \"id\": 1,\r\n//     \"image\": \"./assets/img/lucina-thumb.png\",\r\n//     \"name\": \"Lucina\"\r\n//   },\r\n//   {\r\n//     \"id\": 2,\r\n//     \"image\": \"./assets/img/inkling-thumb.png\",\r\n//     \"name\": \"Inkling\"\r\n//   },\r\n//   {\r\n//     \"id\": 3,\r\n//     \"image\": \"./assets/img/mario-thumb.png\",\r\n//     \"name\": \"Mario\"\r\n//   },\r\n//   {\r\n//     \"id\": 4,\r\n//     \"image\": \"./assets/img/falcon-thumb.png\",\r\n//     \"name\": \"Captain Falcon\"\r\n//   },\r\n//   {\r\n//     \"id\": 5,\r\n//     \"image\": \"./assets/img/link-thumb.png\",\r\n//     \"name\": \"Link\"\r\n//   },\r\n//   {\r\n//     \"id\": 6,\r\n//     \"image\": \"./assets/img/dk-thumb.png\",\r\n//     \"name\": \"Donkey Kong\"\r\n//   },\r\n//   {\r\n//     \"id\": 7,\r\n//     \"image\": \"./assets/img/ness-thumb.png\",\r\n//     \"name\": \"Ness\"\r\n//   },\r\n//   {\r\n//     \"id\": 8,\r\n//     \"image\": \"./assets/img/dedede-thumb.png\",\r\n//     \"name\": \"King Dedede\"\r\n//   },\r\n//   {\r\n//     \"id\": 9,\r\n//     \"image\": \"./assets/img/dedede-thumb.png\",\r\n//     \"name\": \"King Dedede\"\r\n//   }\r\n// ]","const shuffle = array => {\r\n  let i,\r\n      j,\r\n      temp;\r\n  for (i = array.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport default shuffle;","import React from 'react';\r\n\r\nconst ScoreCounter = props => (\r\n  <div>\r\n    <strong>Score:</strong> {props.score} | <strong>High Score:</strong> {props.hiScore}\r\n  </div>\r\n);\r\n\r\nexport default ScoreCounter;","import React from 'react';\r\nimport ScoreCounter from './ScoreCounter';\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <>\r\n    <header>\r\n      <h1>SMASH MEMORY</h1>\r\n      <ScoreCounter\r\n        score={props.score}\r\n        hiScore={props.hiScore}\r\n      />\r\n    </header>\r\n  </>\r\n)\r\nexport default Header;","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n  <div className=\"card\" onClick={() => props.handleClick(props.id)}>\r\n    <img src={props.image} alt={props.alt}/>\r\n  </div>\r\n)\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\nimport \"./CardContainer.css\";\r\n\r\nconst CardContainer = props => (\r\n  <div id=\"card-container\" className={(props.shake) ? \"shake\" : \"\"}>\r\n    {\r\n      props.cards.map(card => (\r\n        <Card\r\n          key={card.id}\r\n          image={card.image}\r\n          alt={card.name}\r\n          id={card.id}\r\n          clicked={card.clicked}\r\n          handleClick={props.handleClick}\r\n        />\r\n      ))\r\n    }\r\n  </div>\r\n)\r\n\r\nexport default CardContainer;","import React, { Component } from 'react';\nimport shuffle from \"./utils/shuffle.js\";\nimport cards from \"./data/cards.js\";\nimport Header from \"./components/Header\"\nimport CardContainer from './components/CardContainer';\nimport newRecord from './new-record.wav';\nimport loss from './loss.wav';\n\nconst cardsShuffled = shuffle(cards.map(card => ({ id: card.id, image: card.image, name: card.name, clicked: false })));\n\nclass App extends Component {\n  state = {\n    score: 0,\n    shake: false,\n    hiScore: 0,\n    prevHiScore: 0,\n    cards: cardsShuffled.slice(0, 8),\n    audio: {\n      newRecord: new Audio(newRecord),\n      loss: new Audio(loss)\n    }\n  }\n\n  playSound = sound => {\n    this.state.audio[sound].play();\n  }\n\n  handleClick = id => {\n    const selectedCard = this.state.cards.find(card => card.id === id);\n\n    // If card has already been clicked, the game is over\n    if (selectedCard.clicked) {\n      this.setState({\n        cards: shuffle(this.state.cards.map(card => ({ id: card.id, image: card.image, name: card.name, clicked: false }))),\n        score: 0,\n        prevHiScore: this.state.hiScore,\n        shake: true\n      })\n      // Check to see if new high score is higher than the previous\n      if (this.state.prevHiScore < this.state.hiScore) {\n        this.playSound('newRecord');\n      } else {\n        this.playSound('loss');\n      }\n    } else {\n      this.setState({ \n        cards: shuffle(this.state.cards\n          .map(card => (card.id === id) ? { id: card.id, image: card.image, name: card.name, clicked: true} : card)),\n        shake: false,\n        score: this.state.score + 1,\n        hiScore: Math.max(this.state.score + 1, this.state.hiScore)});\n    }\n  }\n  \n  render() {\n    return (\n      <>\n        <Header\n          score={this.state.score}\n          hiScore={this.state.hiScore} \n        />\n        <CardContainer\n          cards={this.state.cards}\n          handleClick={this.handleClick}\n          shake={this.state.shake}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}